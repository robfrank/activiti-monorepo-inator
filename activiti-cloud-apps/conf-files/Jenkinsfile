pipeline {
  options {
    disableConcurrentBuilds()
    quietPeriod(30)
  }
  agent {
    kubernetes {
      // Change the name of jenkins-maven label to be able to use yaml configuration snippet
      label "maven-dind"
      // Inherit from Jx Maven pod template
      inheritFrom "maven"
      // Add pod configuration to Jenkins builder pod template
      yamlFile "maven-dind.yaml"
    }
  }
  environment {
    ORG = 'activiti'
    REALM = "activiti"
    APP_NAME = 'activiti-cloud-example-app'
    JX_VERSION = jx_release_version()
    VERSION = "$JX_VERSION-TEST"
    CHARTMUSEUM_CREDS = credentials('jenkins-x-chartmuseum')
    GITHUB_CHARTS_REPO = "https://github.com/Activiti/activiti-cloud-helm-charts.git"
    GITHUB_HELM_REPO_URL = "https://activiti.github.io/activiti-cloud-helm-charts/"
    PREVIEW_NAMESPACE = "example-$BRANCH_NAME-$BUILD_NUMBER".toLowerCase().replaceAll("[\\-\\+\\.\\^:,]", "");
    GLOBAL_GATEWAY_DOMAIN = "35.242.205.159.nip.io"
    GATEWAY_HOST = "gateway.$PREVIEW_NAMESPACE.$GLOBAL_GATEWAY_DOMAIN"
    SSO_HOST = "identity.$PREVIEW_NAMESPACE.$GLOBAL_GATEWAY_DOMAIN"
    RELEASE_BRANCH = "develop"
    RELEASE_TAG_REGEX = "*M*"
    ACTIVITI_CLOUD_FULL_CHART_VERSIONS= "$VERSION"

  }
  stages {
    stage('CI Build and push snapshot') {
      when {
        branch 'PR-*'
      }
      environment {
        PROJECT_VERSION = maven_project_version()
        VERSION = "$PROJECT_VERSION".replaceAll("SNAPSHOT", "$BRANCH_NAME-$BUILD_NUMBER-SNAPSHOT")
        PREVIEW_NAMESPACE = "$APP_NAME-$BRANCH_NAME".toLowerCase()
        HELM_RELEASE = "$PREVIEW_NAMESPACE".toLowerCase()
      }
      steps {
        container('maven') {
          sh "mvn versions:set -DprocessAllModules=true -DgenerateBackupPoms=false -DnewVersion=$VERSION"
          sh "mvn install"
          sh 'export VERSION=$VERSION && skaffold build -f skaffold.yaml'

          // sh "jx step post build --image $DOCKER_REGISTRY/$ORG/$APP_NAME:$VERSION"

          dir("./charts/$APP_NAME") {
            sh "make preview"
          }

          sh "mvn deploy -DskipTests"
        }
      }
    }
    stage('Build Releass for apps') {
      when {
        branch 'develop'
      }
      steps {
        container('maven') {
          // ensure we're not on a detached head
          sh "git checkout develop"
          sh "git config --global credential.helper store"

          sh "jx step git credentials"
          // so we can retrieve the version in later steps
          sh "echo $VERSION > VERSION"
          sh "mvn versions:set -DprocessAllModules=true -DgenerateBackupPoms=false -DnewVersion=$VERSION"

          script {

            sh "echo $VERSION > VERSION"

            sh "git add --all"
            sh """git commit -m "release $VERSION" --allow-empty """
            sh """ git tag -fa v$VERSION -m "Release version $VERSION" """
            sh "git push origin v$VERSION "

            def modules = ["example-runtime-bundle",
                           "activiti-cloud-audit",
                           "activiti-cloud-query",
                           "activiti-cloud-notifications-graphql",
                           "example-cloud-connector"]

            for (module in modules) {
              sh "echo working on::: $module"
//              dir("$module/charts/$module") {
//                retry(5) {
//                  sh "make tag"
//                }
//              }

              dir("$module") {
                sh 'mvn clean deploy'

                sh 'export VERSION=$VERSION && skaffold build -f skaffold.yaml'

                sh "jx step post build --image $DOCKER_REGISTRY/$ORG/$module:$VERSION"
              }
            }
          }
        }
      }
    }


    stage('Build Release for acceptance test') {
      when {
        branch 'develop'
      }
      steps {
        container('maven') {
          dir("activiti-cloud-acceptance-scenarios") {
            sh "mvn clean install -DskipTests"
          }

          dir("activiti-cloud-dependencies") {
            sh "mvn clean install -DskipTests"
          }
        }
      }
    }
    stage('Build And Deploy Helm Chart') {
      steps {
        container('maven') {

          sh "updatebot --dry push-version --kind helm activiti-cloud-dependencies $VERSION $ACTIVITI_CLOUD_FULL_CHART_VERSIONS"
          sh """echo "-------------------------------------" """
          sh """cd  .updatebot-repos/github/activiti/activiti-cloud-full-chart/charts/activiti-cloud-full-example/ && \\
                    rm -rf requirements.lock && \\
                    rm -rf charts && \\
                    rm -rf *.tgz && \\
                    helm init --client-only && \\
                    helm repo add activiti-cloud-helm-charts https://activiti.github.io/activiti-cloud-helm-charts/ && \\
                    helm repo add alfresco https://kubernetes-charts.alfresco.com/stable\t&& \\
                    helm repo add alfresco-incubator https://kubernetes-charts.alfresco.com/incubator && \\
                    helm dependency build && \\
                    helm lint && \\
                    helm package . """
          sh """echo "-------------------------------------" """
          sh """ cd  .updatebot-repos/github/activiti/activiti-cloud-full-chart/charts/activiti-cloud-full-example/ && \\
            helm upgrade $PREVIEW_NAMESPACE . \\
            --install \\
            --set global.gateway.domain=$GLOBAL_GATEWAY_DOMAIN \\
            --namespace $PREVIEW_NAMESPACE \\
            --debug \\
            --wait """
          sh """echo "-------------------------------------" """
          sh "sleep 30"
        }
      }
    }
    stage("Build Acceptance Scenarios") {
      steps {
        container('maven') {
          dir("activiti-cloud-acceptance-scenarios") {

            sh "mvn clean install -DskipTests"
//            sh "make activiti-cloud-acceptance-scenarios"
          }
        }
      }
    }

    stage("Run Acceptance Scenarios") {
      parallel {
        stage("Modeling Acceptance Tests") {
          steps {
            container('maven') {
              dir("activiti-cloud-acceptance-scenarios") {

                sh "mvn -pl 'modeling-acceptance-tests' clean verify"
//                sh "make modeling-acceptance-tests"
              }
            }
          }
          post {
            failure {
              slackSend(
//                channel: "#activiti-community-builds",
//                color: "danger",
//                message: "FAILED: Modeling Acceptance Tests: $BUILD_URL"
              )
            }
          }
        }
        stage("Runtime Acceptance Scenarios") {
          steps {
            container('maven') {
              dir("activiti-cloud-acceptance-scenarios") {
                sh "mvn -pl 'runtime-acceptance-tests' clean verify"

//                sh "make runtime-acceptance-tests"
              }
            }
          }
          post {
            failure {
              slackSend(
//              channel: "#activiti-community-builds",
//                color: "danger",
//                message: "FAILED: Runtime Acceptance Tests: $BUILD_URL"
              )
            }
          }
        }
      }
      post {
        success {
          slackSend(
//            channel: "#activiti-community-builds",
//            color: "good",
//            message: "SUCCESSFUL: Activiti Cloud Dependendencies Acceptance Tests: $BUILD_URL"
          )
        }
      }
    }


    stage('Promote to Environments apps') {
      when {
        branch 'UNDEFINED'
      }
      steps {
        container('maven') {
          script {
            def modules = ["example-runtime-bundle", "activiti-cloud-audit", "activiti-cloud-query", "activiti-cloud-notifications-graphql", "example-cloud-connector"]

            for (module in modules) {
              dir("$module/charts/$module") {
                // it is failing looks like a bug in JX
                // sh 'jx step changelog --version v$VERSION'

                // release the helm chart
                retry(5) {
                  sh 'make github'
                }
                sh 'sleep 10'
                retry(5) {
                  //                     sh 'make updatebot/push-version'
                }
              }
            }
          }
        }
      }
    }
  }

  post {
//    failure {
//      slackSend(
//             channel: "#activiti-community-builds",
//             color: "danger",
//             message: "$BUILD_URL"
//      )
//    }
    always {
      delete_deployment()
      cleanWs()
    }
  }
}

def delete_deployment() {
  container('maven') {
    sh "helm delete --purge $PREVIEW_NAMESPACE | echo 'try to remove helm chart '$PREVIEW_NAMESPACE"
    sh "kubectl delete namespace $PREVIEW_NAMESPACE | echo 'try to remove namespace '$PREVIEW_NAMESPACE "
  }
}

def jx_release_version() {
  container('maven') {
    return sh(script: "echo \$(jx-release-version)", returnStdout: true).trim()
  }
}

def maven_project_version() {
  container('maven') {
    return sh(script: "echo \$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout -f pom.xml)", returnStdout: true).trim()
  }
}
